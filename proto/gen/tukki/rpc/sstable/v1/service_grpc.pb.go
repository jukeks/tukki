// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: tukki/rpc/sstable/v1/service.proto

package sstablev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SstableService_GetSstable_FullMethodName = "/tukki.rpc.sstable.v1.SstableService/GetSstable"
)

// SstableServiceClient is the client API for SstableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SstableServiceClient interface {
	GetSstable(ctx context.Context, in *GetSstableRequest, opts ...grpc.CallOption) (SstableService_GetSstableClient, error)
}

type sstableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSstableServiceClient(cc grpc.ClientConnInterface) SstableServiceClient {
	return &sstableServiceClient{cc}
}

func (c *sstableServiceClient) GetSstable(ctx context.Context, in *GetSstableRequest, opts ...grpc.CallOption) (SstableService_GetSstableClient, error) {
	stream, err := c.cc.NewStream(ctx, &SstableService_ServiceDesc.Streams[0], SstableService_GetSstable_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sstableServiceGetSstableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SstableService_GetSstableClient interface {
	Recv() (*GetSstableResponse, error)
	grpc.ClientStream
}

type sstableServiceGetSstableClient struct {
	grpc.ClientStream
}

func (x *sstableServiceGetSstableClient) Recv() (*GetSstableResponse, error) {
	m := new(GetSstableResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SstableServiceServer is the server API for SstableService service.
// All implementations must embed UnimplementedSstableServiceServer
// for forward compatibility
type SstableServiceServer interface {
	GetSstable(*GetSstableRequest, SstableService_GetSstableServer) error
	mustEmbedUnimplementedSstableServiceServer()
}

// UnimplementedSstableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSstableServiceServer struct {
}

func (UnimplementedSstableServiceServer) GetSstable(*GetSstableRequest, SstableService_GetSstableServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSstable not implemented")
}
func (UnimplementedSstableServiceServer) mustEmbedUnimplementedSstableServiceServer() {}

// UnsafeSstableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SstableServiceServer will
// result in compilation errors.
type UnsafeSstableServiceServer interface {
	mustEmbedUnimplementedSstableServiceServer()
}

func RegisterSstableServiceServer(s grpc.ServiceRegistrar, srv SstableServiceServer) {
	s.RegisterService(&SstableService_ServiceDesc, srv)
}

func _SstableService_GetSstable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSstableRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SstableServiceServer).GetSstable(m, &sstableServiceGetSstableServer{stream})
}

type SstableService_GetSstableServer interface {
	Send(*GetSstableResponse) error
	grpc.ServerStream
}

type sstableServiceGetSstableServer struct {
	grpc.ServerStream
}

func (x *sstableServiceGetSstableServer) Send(m *GetSstableResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SstableService_ServiceDesc is the grpc.ServiceDesc for SstableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SstableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tukki.rpc.sstable.v1.SstableService",
	HandlerType: (*SstableServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSstable",
			Handler:       _SstableService_GetSstable_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tukki/rpc/sstable/v1/service.proto",
}
